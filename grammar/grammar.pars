result = ( block / line ) *

block = space? (mode_block / bar_block)
bar_block = "bar" space "{" newline (space? (bar_statement / colors_block) newline)* "}" newline
bar_statement = bar_position_statement / bar_status_command / font_statement
colors_block = "colors" space "{" newline (space? colors_statement newline)* space "}"
quote_block = ( space ? ) "{" newline (colors_block / lines)* ( space ? ) "}" newline
mode_block = "mode" space (quoted_variable / quoted_string) quote_block


lines = line*
line = space? (comment / statement)
statement = statement_no_line newline
statement_no_line = bind_statement / geometry_statement / mouse_warping_statement / workspace_layout / workspace_statement / yes_no_statement / set_statement / font_statement / floating_modifier_statement / workspace_buttons / popup_fullscreen_action / exec_always / exec_command / window_event / assign_statement / no_focus_statement / orientation_statement / new_float_border / new_window_border / hide_edge_borders_statement / set_from_resource / client_statement/ colors_statement / empty_statement

workspace_statement = "workspace" space word_or_quoted_string space "output" space word_or_quoted_string
yes_no_statement =  ( "workspace_auto_back_and_forth" / "force_focus_wrapping" / "focus_follows_mouse" / "force_xinerama") space yes_no
colors_statement = ("separator" space color) / ("background" space color) / ("statusline" space color) / ("focused_workspace" space color space color space color) / ("active_workspace" space color space color space color) / ("inactive_workspace" space color space color space color) / ("urgent_workspace" space color space color space color)
bar_position_statement = "position" space ("top" / "bottom")

window_event = "for_window" space window_specifier space bind_action
window_specifier = "[" ( comma_list ) "]"
comma_list = (key_value space ("," space)? comma_list) / key_value
key_value = variable_name "=" quoted_string
mouse_warping_statement = "mouse_warping" space ( "none" / "output" )


assign_statement = "assign" space window_specifier space ("â†’" space)? workspace_params
no_focus_statement = "no_focus" space window_specifier

hide_edge_borders_statement = "hide_edge_borders" space window_edge_const

window_edge_const = "none" / "vertical" / "horizontal" / "both" / "smart"

geometry_statement = ("floating_minimum_size" / "floating_maximum_size") space signed_number (space?) "x" (space?) signed_number

workspace_layout = "workspace_layout" space workspace_layout_mode
workspace_layout_mode = layout_default / "stacking" / "stacked" / "tabbed"

new_float_border = "new_float" space border_tail
new_window_border = "new_window" space border_tail
border_tail = border_arg / border_no_arg
border_no_arg = "none" / "1pixel"
border_arg = ("normal" / "pixel" / "toggle") (space number)?

orientation_statement = "default_orientation" space orientation
orientation = ("vertical" / "horizontal" / "auto" )

popup_fullscreen_action = "popup_during_fullscreen" space popup_action

exec_always = "exec_always" space rest

popup_action = "leave_fullscreen" / "smart" / "ignore"

workspace_buttons = "workspace_buttons" space yes_no

empty_statement = space?
bind_statement = ( "bindsym" / "bindcode" ) (space bind_option)*  space key (space bind_option)* space bind_actions

bind_option = "--release" / "--border" / "--whole-window" / "--exclude-titlebar"

bind_actions = (bind_action space ?  ("," / ";") space ? bind_actions) / bind_action
bind_action = exec_command / fullscreen_command / mode_command / focus_command / kill_command / direct_command / move_command / split_command / layout_command / floating_command / sticky_command / workspace_command / resize_command / scratchpad_command / border_command

border_command = "border" space border_tail

key = word

scratchpad_command = "scratchpad" space "show"

bar_status_command = "status_command" space any_chars

move_command = "move" (space ("container" / "window" / "to" / "--no-auto-back-and-forth"))* space move_tail
move_tail = move_to_output / move_to_mark / move_direction / move_to_position / move_to_absolute_position / move_workspace
move_workspace = "workspace" space ("next_on_output" / "prev_on_output" / "next" / "prev" / "current" / move_workspace_to / number / rest)
move_to_output = "output" space word
move_to_mark = "mark" space rest
move_direction = direction (space axiomatic_measurement)?
move_to_position = "position" space move_position
move_to_absolute_position = "absolute" space move_to_position
move_workspace_to = "to" space "output" space word
move_position = "center" / "mouse" / "cursor" / "pointer" / (axiomatic_measurement space axiomatic_measurement)

workspace_command = "workspace" space workspace_params
workspace_params = (workspace_number / workspace_direction / workspace_back_and_forth / rest)
workspace_number = "number" space number
workspace_direction = "next_on_output" / "prev_on_output" / "next" / "prev"
workspace_back_and_forth = "back_and_forth"

sticky_command = "sticky" space enable_disable_toggle
floating_command = "floating" space enable_disable_toggle
enable_disable_toggle = "enable" / "toggle" / "disable"


fullscreen_command = "fullscreen" (space (fullscreen_mode / fullscreen_global / fullscreen_disable))?
fullscreen_mode = ("enable" / "toggle") (space "global")?
fullscreen_disable = "disable"
fullscreen_global = "global"

layout_command = "layout" space (layout_toggle / layout_mode / layout_default)
layout_toggle = "toggle" space (layout_toggle_multiple / layout_toggle_single)
layout_toggle_single = layout_split / layout_all
layout_toggle_multiple = layout_multiple_option (space layout_multiple_option)+
layout_multiple_option = layout_mode / layout_split
layout_default = "default"
layout_all = "all"
layout_split = "split"
layout_mode = "stacking" / "tabbed" / "splitv" / "splith"

focus_command = "focus" space (direction / focus_mode / focus_target / focus_relative / focus_output)
focus_mode = "mode_toggle" / "tiling" / "floating"
focus_target = "parent" / "child"
focus_output = "output" space rest
focus_relative = ("prev" / "next") (space "sibling")?

direction = "left" / "right" / "up" / "down"
kill_command = "kill" (space ("window" / "client"))?
direct_command = "reload" / "restart" / "exit" / "open"
split_command = "split" space split_direction
split_direction = "horizontal" / "vertical" / "toggle" / "h" / "v" / "t"
resize_command = "resize" space (resize_relative / resize_absolute)
# Technically the first axiomatic_measurement has to specify px or be empty. This is caught in the visitor cause it makes the grammar simpler
resize_relative = ( "shrink" / "grow" ) space resize_direction (space axiomatic_measurement (space "or" space axiomatic_measurement)?)?
resize_direction = "left" / "right" / "up" / "down" / "width" / "height"
resize_absolute = "set" space (resize_both / resize_width / resize_height)
resize_width = ("width" space)? axiomatic_measurement
resize_height = ("height" space)? axiomatic_measurement
resize_both = resize_width space resize_height


mode_command = "mode" space rest

exec_command = "exec" space exec_bash
exec_bash = any_chars

client_statement = "client." client_statement_tail
client_statement_tail = client_focused_statement / client_focused_inactive_statement / client_unfocused_statement / client_urgent_statement / client_placeholder_statement / client_background_statement
client_focused_statement = "focused" space color space color space color space color space color
client_focused_inactive_statement = "focused_inactive" space color space color space color space color space color
client_unfocused_statement = "unfocused" space color space color space color space color space color
client_urgent_statement = "urgent" space color space color space color space color space color
client_placeholder_statement = "placeholder" space color space color space color space color space color
client_background_statement = "background" space color
floating_modifier_statement = "floating_modifier" (space (modifier_key / variable) (space "+")?)*
modifier_key = "mod1" / "mod2" / "mod3" / "mod4" / "mod5" / "shift" / "control" / "ctrl"
comment = octo any_chars newline
font_statement = "font" space any_chars
color = ~"\#[0-9ABCDEF]{6}"
any_chars = ~".*"
octo = ~"\#"
newline = ~"\n"
yes_no = "yes" / "no"
space = ~"[ \t]+"
set_statement = "set" space variable space rest
set_from_resource = "set_from_resource" space variable space dotted_name space rest
word = ~"[^() \n]+"
rest = ~"[^\n]+"
dotted_name =  ( variable_name "." dotted_name ) / variable_name
variable_name = ~"[a-zA-Z_][a-zA-Z_0-9]*"
variable = "$" variable_name

word_or_quoted_string = quoted_string / word
quoted_variable = quote variable quote

quoted_string = quote string_contents quote
string_contents = ~'[^"\n]*'
quote = "\""

measurement = ((axiomatic_measurement space "or" space measurement) / axiomatic_measurement)
axiomatic_measurement = number (space? unit)?
unit = "ppt" / "px"
number = ~"[0-9]+"
signed_number = ( "-" ? ) number